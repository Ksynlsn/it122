<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>it122</title>
        <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
        <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
        <!-- Don't use this in production: -->
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link href="https://fonts.googleapis.com/css2?family=Dongle&family=Inter:wght@700&family=Palanquin+Dark:wght@600&display=swap" rel="stylesheet">
    </head>
    <style>
        * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        }
        html {
          font-size: 16px;
          background-color: #dee9e854;
        }
        header {
        padding: 2.2rem;
        background-color: #6CABA6;
        }
        nav a {
        text-decoration: none;
        font-family: 'Palanquin Dark', sans-serif;
        color: #102D45;
        padding-left: 1.6rem;
        font-size: 2.9rem;
        }
        nav ul {
        display: flex;
        justify-content: left;
        list-style-type: none;
        }
        .wrapper { 
        max-width: 1500px;
        min-width: 745px;
        display: flex;
        flex-direction: column;
        min-height: 100%;
        }
        .flex-container {
          display: flex;
        }
        h1, h2, h3 {
          font-family: 'Inter', sans-serif;
          text-transform: capitalize;
          padding: 1rem;
        }
        h1 {
        font-size: 1.8rem;
        color: #76AFDE;
        }
        h2, #adoptionStatus {
        font-size: 1.4rem;
        color: #6CABA6;
        }
        #detailsH2 {
          font-size: 1.6rem;
          color: #76AFDE;
        }
        h3 {
        font-size: 1.6rem;
        color: #102D45;
        }
        li {
        font-family: 'Dongle', sans-serif;
        list-style-type: none;
        font-size: 2rem;
        }
        p {
        font-family: 'Dongle', sans-serif;
        font-size: 1.8rem;
        }
        h1, h2, h3, p {
          text-align: center;
        }
        .flex-container.home {
        justify-content: center;
        }
        .flex-container #cats { /* ul */
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-evenly;
        }
        #cats li {
        padding: 2.6rem;
        color: #102D45;
        }
        #catImage {
        border-radius: 24px;
        border: 3.5px solid #6CABA6;
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        display:block;
        }
        .container-details {
        overflow: hidden;
        margin: 2em 3em;
        padding: 2%;
        border: 3.5px solid #6CABA6;
        border-radius: 24px;
        position: relative;
        }
        .featured-image {
        max-width: 58%;
        float: right;
        margin: 2em;
        }
        .form {
        width: 30%;
        float: left;
        }
        input {
        display: block;
        margin: .25em .50em .25em;
        padding: 4px;
        border-radius: 24px;
        }
        label {
        font-family: 'Dongle', sans-serif;
        font-size: 1.8rem;
        }
        .buttons {
          margin: 0 auto;
        }
        button {
        background-color: #6CABA6;
        color: white;
        letter-spacing: 1.3px;
        width: 90px;
        line-height: 24px;
        opacity: 1;
        margin: 0 1em;
        padding: 8px;
        border-radius: 25px;
        display: inline-block;
        }
        footer {
        width: 100%;
        min-height: 300px;
        background-color: #102D45;
        margin-top: 2em;
        }
        .footer-top {
        background: #B5A4A0;
        height: 50px;
        margin-bottom: 200px;
        }
        footer p {
        color: #B5A4A0;
        }
        @media (max-width: 700px) {
        .container-details { display: flex; flex-direction: column; }
        .form { float: none; width: 100%; }
        .featured-image { float: none; margin: 1.5em auto; max-width: 100%;}
        input { width: 100%; }
        }   
      </style>

<body>
  <div id="root" className="wrapper"> <!-- wrapper -->

  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script type="text/babel">

  const Greeting = (props) => {
        if (props.name) {
          return <h2>Hello, {props.name}!!!</h2>;
        }
        return <h2>Hello, stranger!</h2>;
    }

    const Header = () => (
      <header>
        <nav>
          <ul>
            <li className="nav-item">
              <a className="nav-link" href="/">Home</a></li>
            <li className="nav-item">
              <a className="nav-link" href="/about">About</a>
            </li>
          </ul>
        </nav>
      </header>
    )

    const Hero = ({heroImage, altText}) => (
      <div className="hero">
        <img style={{maxWidth: '100%', display: 'block'}}
         src={heroImage} alt={altText}/>
      </div>
    )

    const HeadingOne = ({ message }) => (
      <div>
        <h1>{message}</h1>
      </div>
    )

     const HeadingTwo = ({ message, id }) => (
      <div>
        <h2 id={id}>{message}</h2>
      </div>
    )

    const Footer = () => (
        <footer>
          <div className="footer-top"></div>
          <p>&copy; Copyright 2023 ~ This Is A Footer</p>
        </footer>
    )

    const Image = (props) => {
      return (
        <div className="featured-image">
                <img id="catImage" src={props.image} />
        </div>
      );
    }

    const HeadingThree = ({ message, id }) => {
        return <div>
                  <h3 id={id}>{message}</h3>
                </div>
    };
  

    const Cats = (props) => {
        
        const listItems = props.cats.map((item) => 
          <li onClick={props.onClick} key={item['name']} style={{ textTransform: 'capitalize'}}>
            {item['name']}
          </li>);
          return (
            <div className="flex-container home">
              <div className="ul-wrapper home">
                <ul className="flex-container" id="cats">
                  {listItems}
                </ul>
              </div>
            </div>)
    }

    const CatDetail = (props) => {
      return (
        <div className="form">
          <h3>Cat Details</h3>
          <form id="myForm">
          <label>Name:<input type="text" name="name" value={props.cat.name || ""} style={{ textTransform: 'capitalize'}} onChange={props.onChange} /></label>
          <label>Age:<input type="number" name="age" value={props.cat.age || ""} onChange={props.onChange} /> </label>
          <label>Sex:<input type="text" name="sex" value={props.cat.sex || ""} onChange={props.onChange} /> </label>
          <label>Breed:<input type="text" name="breed" value={props.cat.breed || ""} onChange={props.onChange} /> </label>
          <label>Temperment:<input type="text" name="temperment" value={props.cat.temperment !=null ? props.cat.temperment : ""} onChange={props.onChange} /> </label>
          <label id="favToys">Fav Toys:<input type="text" name="favToys" value={props.cat.favToys ? props.cat.favToys : ""} onChange={props.onChange} /> </label>
          <label>Available:<input type="text" name="isAvailable" value={props.cat.isAvailable !=null ? props.cat.isAvailable.toString() : ""} onChange={props.onChange} /> </label>
          </form>
        </div>
      )
    }

    const ResetButton = (props) => {
      return <button id="myForm" className="reset" onClick={props.onClick} type="button">reset</button>
    }

    const SaveItemButton = (props) => {
      return <button className="save" onClick={props.onClick} type="button">save</button>
    }

    const DeleteItemButton = (props) => {
      return <button className="delete" onClick={props.onClick} type="button">delete</button>
    }

    const App = (props) => {
      const [items, setItems] = React.useState([]);
      const [currentItem, setCurrentItem] = React.useState({});

      React.useEffect(() => {
        const fetchData = async () => {
          fetch("/api/cats").then(res => res.json())
          .then((data) => {
            console.log('data:', data);
            let catArray = data.cats;
            setItems(catArray);
            console.log('catArray:', catArray);
          })
        }
        fetchData()
      }, []);
      

        const selectItem = (event) => {
          console.log(event.target);

          const found = items.find((item) => { // function will run when list item is clicked
            return item.name === event.target.innerHTML;
          });
          setCurrentItem(found);
        }
      
        const resetForm = () => {
            setCurrentItem({});
        }

            // list click event handler
      const handleChange = (event) => {
        console.log(event.target)
        let newItem = { ...currentItem };
        newItem[event.target.name] = event.target.value;
        // update currentItem state
        setCurrentItem(newItem);
        // update list state
        items.find((item, index) => {
          if (item.name == newItem.name) {
            items[index] = newItem;
            setItems(items);
          }
        })
      }

        // Save Button
        const saveItem = () => {
          if (!currentItem.name) {
            return;
          }
          fetch("/api/add", {
            method: "POST",
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(currentItem)
          })
          .then(res => res.json())
          .then((data) => {
            if (!currentItem._id) {
              currentItem._id = data._id;
              setCurrentItem(currentItem);
              let updatedItems = [...items];
              updatedItems.push(currentItem);
              setItems(updatedItems);
            }
          })
        }

        // Delete Button
        const deleteItem = () => {
          fetch(`/api/delete/${currentItem.name}`)
          .then(res => res.json())
          .then((deleted) => {
            console.log(deleted);
            const newItems = items.filter((item) => {
              return item._id !== currentItem._id;
            });
            setItems(newItems);
            setCurrentItem({})
          });
        }

      const setImagePath = () => {
        let imagePath = "";
        if (currentItem.hasImage == true) {
          imagePath = `/images/${currentItem.name}.jpeg`; 
      } else {
          imagePath = "/images/cat_image.jpeg";
      }
        return imagePath;
      }

        return (
          <div>
            <Header />
              <Hero heroImage="/images/cat_hero.jpeg" altText="a slim, white cat playing with string" />
              <HeadingOne message="Welcome!" />
              <HeadingTwo message="Meet Our Featured Cats!" />
              <Cats cats={items} onClick={selectItem} />
              <HeadingTwo id="detailsH2" message={currentItem && currentItem.name ? `Thank you for asking about ${currentItem.name}!` : 'Select a cat to learn more about them'} />
              <HeadingThree id="adoptionStatus" message={currentItem.name && currentItem.isAvailable == true ? ` ${currentItem.name} is available for adoption!` : currentItem.name && currentItem.isAvailable == false ? `${currentItem.name} is not available for adoption!` : currentItem.name && currentItem.isAvailable == null ? `Please contact us for ${currentItem.name}'s adoption status` : ''} />
              <div className="container-details">
              <CatDetail cat={currentItem} onChange={handleChange} />
              <Image image={setImagePath(currentItem)}/>
              </div>
              <div className="flex-container buttons">
              <div className="buttons">
              <ResetButton onClick={resetForm} />
              <SaveItemButton onClick={saveItem} />
              <DeleteItemButton onClick={deleteItem} />
              </div>
              </div>
            <Footer />

          </div>
        );
    }

    const container = document.getElementById('root');
    const root = ReactDOM.createRoot(container);
    root.render(<App />);

  </script>

  </div> <!-- close root % wrapper -->
</body>
</html>